---
title: Volunteers
summary: Data about volunteering
key: volunteers
work_in_progress: true
metas:
  title: LEEDS 2023 Metrics - Volunteers
  description: |
    Visualisations of key metrics related to the LEEDS 2023 volunteering.
order: 10
limitations:
  - |
      Application dates prior to the 5th October are estimated based on the last modification
      date of the user record. This is very likely to incorrectly estimate the date that the application
      was received. Overall numbers should still work.
  - The hexmaps do not show volunteers from outside the Leeds wards.
---
{%- macro popupPreApplication(params) -%}
  {{ params.label }}</br>
  {{ params.value }} signups
{%- endmacro -%}
{%- macro popupApplied(params) -%}
  {{ params.label }}</br>
  {{ params.value }} applications received
{%- endmacro -%}

<h2>Headlines</h2>

{% comp 'grid.autogrid' %}
  {% comp 'grid.block.impact',  { bg: 'var(--l23-mint)' } %}
    <h3>Volunteer sign-ups</h3>
    {{ comp.viz.bigNumber({
      number: metrics.volunteers.by_week.columns.created | last
    }) | safe }}
    <p>The number of people who have signed up to the volunteer system (Rosterfy).</p>
  {% endcomp %}
  {% comp 'grid.block.impact',  { bg: 'var(--l23-yellow)' } %}
    <h3>Applications received</h3>
    {{ comp.viz.bigNumber({
      number: metrics.volunteers.by_week.columns.applied | last
    }) | safe }}
    <p>The number of volunteering applications that have been received.</p>
  {% endcomp %}
  {% comp 'grid.block.impact',  { bg: 'var(--l23-cyan)' } %}
    <h3>Volunteering offers made</h3>
    {{ comp.viz.bigNumber({
      number: metrics.volunteers.by_week.columns.offered | last or '--'
    }) | safe }}
    <p>The number of people who have offered volunteering positions.</p>
  {% endcomp %}
  {% comp 'grid.block.impact',  { bg: 'var(--l23-magenta)' } %}
    <h3>Volunteers confirmed</h3>
    {{ comp.viz.bigNumber({
      number: metrics.volunteers.by_week.columns.confirmed | last or '--'
    }) | safe }}
    <p>The number of volunteers who have been appointed.</p>
  {% endcomp %}
{% endcomp %}

<p>Page updated: {{ date | date('HUMAN_DATE') }}</p>

<h2>Distribution of volunteers</h2>

<p>
  The hex cartograms below show the distribution of volunteers' home addresses across
  the wards of Leeds. Wards with a larger number of resident volunteers are darker in
  colour.
</p>
  
{% comp 'grid.autogrid', { min_width: '32rem' } %}
  <section>
    <h3>Signed-up</h3>
    {{ comp.charts.hexmap({
      hexjson: hex.wards_leeds,
      data: metrics.volunteers.by_ward.rows,
      matchKey: 'ward_code',
      valueProp: 'created',
      popup: popupPreApplication,
      bgColour: '#BBB',
      title: 'Initial sign-ups by people living in ward'
    }) | safe }}
  </section>
  <section>
    <h3>Applications</h3>
    {{ comp.charts.hexmap({
      hexjson: hex.wards_leeds,
      data: metrics.volunteers.by_ward.rows,
      matchKey: 'ward_code',
      valueProp: 'applied',
      popup: popupApplied,
      bgColour: '#BBB',
      title: 'Volunteer applications received from people in ward'
    }) | safe }}
  </section>
{% endcomp %}


<h2>Growth in volunteering</h2>

{{ comp.oi.linechart() | safe }}

{% comp 'layout.figure', {
  title: 'Cumulative counts of volunteer user profiles by status'
} %}
<div id="wa-chart-1" class="wa-chart chart"></div>
{% endcomp %}

<style>
  .wa-chart {
    height: 30rem;
    margin-left: auto;
    margin-right: auto;
  }
  .key rect {
    stroke: none;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const rawData = JSON.parse(`{{ metrics.volunteers.by_week.rows | dump | safe }}`);
    const dateFormatter = (date) => date.toLocaleString('default', { day: 'numeric', month: 'short' });
    const data = {
      week: rawData.map(x => new Date(x.week_ending)),
      values: {
        created: rawData.map(x => x.created),
        applied: rawData.map(x => x.applied),
        offered: rawData.map(x => x.offered),
        confirmed: rawData.map(x => x.confirmed),
      },
      axis: {
        yMax: Math.max(...rawData.map(x => x.created))
      }
    };

    // Work out maximum y value and labels
    const gridSpacing = 200;
    const yMax = Math.ceil(Math.max(...data.values.created)/gridSpacing) * gridSpacing;
    const yLabels = {};
    for (let l = 0; l <= yMax; l+=gridSpacing) yLabels[l] = { label: l };

    const labels = data.week.reduce((a, c, n) => ({ ...a, [n]: { label: n % 2 === 0 ? dateFormatter(c) : undefined } }), {})
    const makeCoordinates = (v, n) => ({ x: n, y: parseInt(v, 10) });
    const created = data.values.created.map(makeCoordinates);
    const applied = data.values.applied.map(makeCoordinates);
    const offered = data.values.offered.map(makeCoordinates);
    const confirmed = data.values.confirmed.map(makeCoordinates);

    chart = OI.linechart(document.getElementById('wa-chart-1'), {
      left: 80,
      right: 30,
      top: 30,
      bottom: 60,
      // Draw a key
      key: { show: true, position: 'top left' },
      // Define the axes
      'axis': {
        'x': {
          'line': { 'show': true },
          'title': { 'label': 'Week ending (Friday)', 'anchor': 'middle' },
          'labels': labels,
        },
        'y': {
          'line': { show: false },
          'grid': { show: true, 'stroke-width': '0.5px' },
          'title': { label: 'Numbers of volunteers' },
          'max': yMax,
          'labels': yLabels,
        }
      }
    });
    const colours = [
      'var(--l23-mint)',
      'var(--l23-yellow)',
      'var(--l23-cyan)',
      'var(--l23-magenta)',
    ]
    chart.addSeries(confirmed, {
      'title': 'Volunteers appointed (cumulative)',
      'points': { 'size': 6, 'color': colours[3] },
      'line': { 'color': colours[3] },
      // 'tooltip': { 'label': 'Cumulative attendees' }
    });
    chart.addSeries(offered, {
      'title': 'Offers made (cumulative)',
      'points': { 'size': 6, 'color': colours[2] },
      'line': { 'color': colours[2] },
      // 'tooltip': { 'label': 'Cumulative attendees' }
    });
    chart.addSeries(applied, {
      'title': 'Applications received (cumulative)',
      'points': { 'size': 6, 'color': colours[1] },
      'line': { 'color': colours[1] },
      // 'tooltip': { 'label': 'Cumulative attendees' }
    });
    chart.addSeries(created, {
      'title': 'Sign-ups (cumulative)',
      'points': { 'size': 6, 'color': colours[0] },
      'line': { 'color': colours[0] },
      // 'tooltip': { 'label': 'Cumulative attendees' }
    });
    chart.draw();
  });
</script>

