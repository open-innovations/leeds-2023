{{ comp.oi.linechart() | safe }}

<div id="twitter-chart-audience" class="social-chart"></div>
<div id="instagram-chart-audience" class="social-chart"></div>
<div id="facebook-chart-audience" class="social-chart"></div>
<div id="linkedin-chart-audience" class="social-chart"></div>

<div id="twitter-chart-engagement" class="social-chart"></div>
<div id="instagram-chart-engagement" class="social-chart"></div>
<div id="facebook-chart-engagement" class="social-chart"></div>
<div id="linkedin-chart-engagement" class="social-chart"></div>

<div id="twitter-chart-impressions" class="social-chart"></div>
<div id="instagram-chart-impressions" class="social-chart"></div>
<div id="facebook-chart-impressions" class="social-chart"></div>
<div id="linkedin-chart-impressions" class="social-chart"></div>

<div id="twitter-chart-gained" class="social-chart"></div>
<div id="instagram-chart-gained" class="social-chart"></div>
<div id="facebook-chart-gained" class="social-chart"></div>
<div id="linkedin-chart-gained" class="social-chart"></div>

<style>
  .social-chart {
    height: 30rem;
    margin-left: auto;
    margin-right: auto;
  }
  .key rect {
    stroke: none;
  }
</style>

<script>
  function fillGraph(params){
    const rawData = JSON.parse(params.file);
    const dateFormatter = (date) => date.toLocaleString('default', { day: 'numeric', month: 'short' });
    const data = {
      week: rawData.map(x => new Date(x.week_starting)),
      values: rawData.map(x => x[params.metric]),
      axis: {
        yMax: Math.max(...rawData.map(x => x[params.metric]))
      }
    };

    // Work out maximum y value and labels
    const yMax = Math.ceil(Math.max(...data.values)/params.gap) * params.gap;
    const yLabels = {};
    for (let l = 0; l <= yMax; l+=params.gap) yLabels[l] = { label: l};

    const labels = data.week.reduce((a, c, n) => ({ ...a, [n]: { label: dateFormatter(c) } }), {})
    const values = data.values.map((v, n) => ({ x: n, y: parseInt(v, 10) }));
    chart = OI.linechart(document.getElementById(params.domID), {
      left: 80,
      right: 30,
      top: 30,
      bottom: 60,
      // Draw a key
      key: { show: true, position: 'top left' },
      // Define the axes
      'axis': {
        'x': {
          'line': { 'show': true },
          'title': { 'label': 'Week starting (Monday)', 'anchor': 'middle' },
          'labels': labels,
        },
        'y': {
          'line': { show: true },
          'grid': { 'show': false, 'stroke-width': '0.5px' },
          'title': { 'label': 'Audience' },
          'max': yMax,
          'labels': yLabels,
        }
      }
    });
    chart.addSeries(values, {
      'title': params.chartTitle,
      'points': { 'size': 6, 'color': params.colour },
      'line': { 'color': params.colour },
      // 'tooltip': { 'label': 'Cumulative values' }
    });
    chart.draw();
  

  }
  document.addEventListener('DOMContentLoaded', function () {
    paramsTwitter = {
              file: `{{ metrics.social_media.twitter_weekly.rows | dump | safe }}`,
              domID: "twitter-chart-audience",
              colour: "#1DA1F2",
              metric: "audience_last",
              gap: 2000,
              chartTitle: "Twitter Audience"
            };

    paramsInstagram = {
              file: `{{ metrics.social_media.instagram_weekly.rows | dump | safe }}`,
              domID: "instagram-chart-audience",
              colour: "#833AB4",
              metric: "audience_last",
              gap: 500,
              chartTitle: "Instagram Audience"
            };

    paramsFacebook = {
              file: `{{ metrics.social_media.facebook_weekly.rows | dump | safe }}`,
              domID: "facebook-chart-audience",
              colour: "#4267B2",
              metric: "audience_last",
              gap: 200,
              chartTitle: "Facebook Audience"
            };

    paramsLinkedin = {
              file: `{{ metrics.social_media.linkedin_weekly.rows | dump | safe }}`,
              domID: "linkedin-chart-audience",
              colour: "#0A66C2",
              metric: "audience_last",
              gap: 500,
              chartTitle: "Linkedin Audience"
            };

    paramsTwitterE = {
              file: `{{ metrics.social_media.twitter_weekly.rows | dump | safe }}`,
              domID: "twitter-chart-engagement",
              colour: "#1DA1F2",
              metric: "engagements_total",
              gap: 1000,
              chartTitle: "Twitter Engagement"
            };

    paramsInstagramE = {
              file: `{{ metrics.social_media.instagram_weekly.rows | dump | safe }}`,
              domID: "instagram-chart-engagement",
              colour: "#833AB4",
              metric: "engagements_total",
              gap: 100,
              chartTitle: "Instagram Engagement"
            };

    paramsFacebookE = {
              file: `{{ metrics.social_media.facebook_weekly.rows | dump | safe }}`,
              domID: "facebook-chart-engagement",
              colour: "#4267B2",
              metric: "engagements_total",
              gap: 500,
              chartTitle: "Facebook Engagement"
            };

    paramsLinkedinE = {
              file: `{{ metrics.social_media.linkedin_weekly.rows | dump | safe }}`,
              domID: "linkedin-chart-engagement",
              colour: "#0A66C2",
              metric: "engagements_total",
              gap: 100,
              chartTitle: "Linkedin Engagement"
            };

    fillGraph(paramsTwitter);
    fillGraph(paramsInstagram);
    fillGraph(paramsFacebook);
    fillGraph(paramsLinkedin);
    fillGraph(paramsTwitterE);
    fillGraph(paramsInstagramE);
    fillGraph(paramsFacebookE);
    fillGraph(paramsLinkedinE);




  });
</script>