---
title: Social Media
summary: Social media statistics
tags:
  - main
order: 30
key: social_media
work_in_progress: false
metas:
  title: LEEDS 2023 Metrics - Social Media
  description: |
    Visualisations of key metrics related to LEEDS 2023 social media accounts.
limitations:
  - LEEDS 2023 also has a presence on YouTube, Spotify and TikTok. At present these are not displayed here. As such, the total digital audience will be larger than displayed on this page.
  - Data may not always be up to date as it is currently reliant on a weekly manual update.
  - Total Audience Gained 2022 for Twitter, Instagram (and therefore All Socials) will be larger than stated as this data was unavailable for January, February and part of March.
---

{% set all_colour = "var(--l23-magenta)" %}
{% set twitter_colour = "#1DA1F2" %}
{% set instagram_colour = "#833AB4" %}
{% set facebook_colour = "var(--l23-mint)" %}
{% set linkedin_colour = "var(--l23-cyan)" %}
<p>
  As part of our engagement and communication strategies, LEEDS 2023 has accounts on a range of digital and social media platforms.
</p>

<p>
  All stats have been derived from data extracted from <a href="https://sproutsocial.com/">Sprout Social</a>,  a social media aggregation tool. The 
  raw data extracted has been aggregated appropriately (either by summing up values or finding the latest value in a given data range).
  Definitions for the metrics measured are explained below, and more information can be found in this 
  <a href="https://support.sproutsocial.com/hc/en-us/articles/213223226-Profile-Performance-Report">article</a>. 
 </p>

<p>
  The data can be downloaded from <a href="https://datamillnorth.org/dataset/leeds-2023-social-media"> Data Mill North</a>.
</p>

<h2 id="headlinetitle">Headlines</h2>

<div class="tab">
  <button class="tablinks" onclick="openCity(event, 'all')" id="defaultOpen">All Socials</button>
  <button class="tablinks" onclick="openCity(event, 'twitter')">Twitter</button>
  <button class="tablinks" onclick="openCity(event, 'instagram')">Instagram</button>
  <button class="tablinks" onclick="openCity(event, 'facebook')">Facebook</button>
  <button class="tablinks" onclick="openCity(event, 'linkedin')">LinkedIn</button>
</div>
<style>
  .tab button {
    border-radius: 3em;
    border-style: none;
    padding: 0.3em 1em;
  }
  .tab button.active {
    color: white;
    background-color: var(--l23-magenta);
  }

  .show {
    border-radius: 3em;
    border-style: none;
    padding: 0.3em 1em;
  }
</style>

<div id="all" class="tabcontent">
  {% comp 'grid.autogrid', {min_width: '32rem'} %}
  {% comp 'grid.block.impact', {bg: all_colour} %}
  <h2>
      Total Audience
    </h2>
  {{ comp.viz.bigNumber({
      number: headlines.service.all.metrics.audience_last | localize
    }) | safe }}
  <p>
      As at {{ headlines.service.twitter.metrics.date_last | date('HUMAN_DATE') }}
  </p>
  {% endcomp %}
  {% comp 'grid.block.impact', {bg: all_colour} %}
  <h2>
      Total Engagement
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.all.metrics.engagements_total
       ) | localize
    }) | safe }}
  {% endcomp %}
  {% comp 'grid.block.impact', {bg: all_colour} %}
  <h2>
      Total Audience Gained
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.all.metrics.audience_gained_total
      ) | localize
    }) | safe }}
  {% endcomp %}
  {% comp 'grid.block.impact', {bg: all_colour} %}
  <h2>
      Total Impressions
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.all.metrics.impressions_total
      ) | localize
    }) | safe }}
  {% endcomp %}
  {% endcomp %}
  <button class="show" onclick="myFunction('alldef')">Show/Hide Definitions</button>
  <div id="alldef">
    <ul>
      <li>
        <dfn>Total Audience</dfn> - The sum of Total Audience for Twitter, Instagram, Facebook and LinkedIn</li>
      <li>
        <dfn>Total Engagement</dfn> - The sum of Total Engagement for Twitter, Instagram, Facebook and LinkedIn</li>
      <li>
        <dfn>Total Impressions</dfn> - The sum of Total Impressions for Twitter, Instagram, Facebook and LinkedIn</li>
      <li>
        <dfn>Total Audience Gained</dfn> - The sum of Total Audience Gained for Twitter, Instagram, Facebook and LinkedIn</li>
    </ul>
  </div>
</div>

<div id="twitter" class="tabcontent">
  {% comp 'grid.autogrid', {min_width: '32rem'} %}
  {% comp 'grid.block.impact', {bg: twitter_colour} %}
  <h2>
      Total Audience
    </h2>
  {{ comp.viz.bigNumber({
      number: headlines.service.twitter.metrics.audience_last | localize
    }) | safe }}
  <p>
      As at {{ headlines.service.twitter.metrics.date_last | date('HUMAN_DATE') }}
  </p>
  {% endcomp %}
  {% comp 'grid.block.impact', {bg: twitter_colour} %}
  <h2>
      Total Engagement
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.twitter.metrics.engagements_total
       ) | localize
    }) | safe }}
  {% endcomp %}
  {% comp 'grid.block.impact', {bg: twitter_colour} %}
  <h2>
      Total Audience Gained
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.twitter.metrics.audience_gained_total
      ) | localize
    }) | safe }}
  {% endcomp %}
  {% comp 'grid.block.impact', {bg: twitter_colour} %}
  <h2>
      Total Impressions
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.twitter.metrics.impressions_total
      ) | localize
    }) | safe }}
  {% endcomp %}
  {% endcomp %}
  <button class="show" onclick="myFunction('twitterdef')">Show/Hide Defenitions</button>
  <div id="twitterdef">
    <ul>
      <li>
        <dfn>Total Audience</dfn> - Twitter Followers</li>
      <li>
        <dfn>Total Engagement</dfn> - "The number of times that users engaged with your posts, including when they liked, @replied, retweeted, or clicked on your posts. This does not include quote tweets of your posts."</li>
      <li>
        <dfn>Total Impressions</dfn> - "The number of times your posts were displayed to users. This includes impressions when your posts are retweeted by other users."</li>
      <li>
        <dfn>Total Audience Gained</dfn> - The sum of Total Audience Gained for Twitter, Instagram, Facebook and LinkedIn</li>
    </ul>
  </div>
</div>

<div id="instagram" class="tabcontent">
  {% comp 'grid.autogrid', {min_width: '32rem'} %}
  {% comp 'grid.block.impact', {
    bg: instagram_colour,
    fg: '#FFFFFF'
  } %}
  <h2>
      Total Audience
    </h2>
  {{ comp.viz.bigNumber({
      number: headlines.service.instagram.metrics.audience_last | localize
    }) | safe }}
  <p>
      As at {{ headlines.service.instagram.metrics.date_last | date('HUMAN_DATE') }}
  </p>
  {% endcomp %}
  {% comp 'grid.block.impact', {
    bg: instagram_colour,
    fg: '#FFFFFF'
  } %}
  <h2>
      Total Engagement
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.instagram.metrics.engagements_total
       ) | localize
    }) | safe }}
  {% endcomp %}
  {% comp 'grid.block.impact', {
    bg: instagram_colour,
    fg: '#FFFFFF'
  } %}
  <h2>
      Total Audience Gained
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.instagram.metrics.audience_gained_total
      ) | localize
    }) | safe }}
  {% endcomp %}
  {% comp 'grid.block.impact', {
    bg: instagram_colour,
    fg: '#FFFFFF'
  } %}
  <h2>
      Total Impressions
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.instagram.metrics.impressions_total
      ) | localize
    }) | safe }}
  {% endcomp %}
  {% endcomp %}

  <button class="show" onclick="myFunction('instagramdef')">Show/Hide Defenitions</button>
  <div id="instagramdef">
    <ul>
      <li>
        <dfn>Total Audience</dfn> - Instagram Followers</li>
      <li>
        <dfn>Total Engagement</dfn> - "The number of times users liked, commented, and saved your posts, replied to your stories, and shared your Reels."</li>
      <li>
        <dfn>Total Impressions</dfn> - "The number of times your content was displayed to users. This does not include profile visitors. For Reels post-level metrics, impressions are mapped to plays on native as Instagram does not provide post-level impressions on Reels."</li>
      <li>
        <dfn>Total Audience Gained</dfn> - Gross number of Followers acquired</li>
    </ul>
  </div>
</div>

<div id="facebook" class="tabcontent">
  {% comp 'grid.autogrid', {min_width: '32rem'} %}
  {% comp 'grid.block.impact', {bg: facebook_colour} %}
  <h2>
      Total Audience
    </h2>
  {{ comp.viz.bigNumber({
      number: headlines.service.facebook.metrics.audience_last | localize
    }) | safe }}
  <p>
      As at {{ headlines.service.facebook.metrics.date_last | date('HUMAN_DATE') }}
  </p>
  {% endcomp %}
  {% comp 'grid.block.impact', {bg: facebook_colour} %}
  <h2>
      Total Engagement
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.facebook.metrics.engagements_total
       ) | localize
    }) | safe }}
  {% endcomp %}
  {% comp 'grid.block.impact', {bg: facebook_colour} %}
  <h2>
      Total Audience Gained
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.facebook.metrics.audience_gained_total
      ) | localize
    }) | safe }}
  {% endcomp %}
  {% comp 'grid.block.impact', {bg: facebook_colour} %}
  <h2>
      Total Impressions
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.facebook.metrics.impressions_total
      ) | localize
    }) | safe }}
  {% endcomp %}
  {% endcomp %}

  <button class="show" onclick="myFunction('facebookdef')">Show/Hide Defenitions</button>
  <div id="facebookdef">
    <ul>
      <li>
        <dfn>Total Audience</dfn> - Facebook Page Likes</li>
      <li>
        <dfn>Total Engagement</dfn> - "The number of times that users reacted to, commented on, shared, or clicked on your posts."</li>
      <li>
        <dfn>Total Impressions</dfn> - "The number of times content associated with your page was displayed to users."</li>
      <li>
        <dfn>Total Audience Gained</dfn> - Gross number of Page Likes acquired</li>
    </ul>
  </div>
</div>

<div id="linkedin" class="tabcontent">
  {% comp 'grid.autogrid', {min_width: '32rem'} %}
  {% comp 'grid.block.impact', {bg: linkedin_colour} %}
  <h2>
      Total Audience
    </h2>
  {{ comp.viz.bigNumber({
      number: headlines.service.linkedin.metrics.audience_last | localize
    }) | safe }}
  <p>
      As at {{ headlines.service.linkedin.metrics.date_last | date('HUMAN_DATE') }}
  </p>
  {% endcomp %}
  {% comp 'grid.block.impact', {bg: linkedin_colour} %}
  <h2>
      Total Engagement
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.linkedin.metrics.engagements_total
       ) | localize
    }) | safe }}
  {% endcomp %}
  {% comp 'grid.block.impact', {bg: linkedin_colour} %}
  <h2>
      Total Audience Gained
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.linkedin.metrics.audience_gained_total
      ) | localize
    }) | safe }}
  {% endcomp %}
  {% comp 'grid.block.impact', {bg: linkedin_colour} %}
  <h2>
      Total Impressions
    </h2>
  {{ comp.viz.bigNumber({
      number: (
        headlines.service.linkedin.metrics.impressions_total
      ) | localize
    }) | safe }}
  {% endcomp %}
  {% endcomp %}
  <button class="show" onclick="myFunction('linkedindef')">Show/Hide Defenitions</button>
  <div id="linkedindef">
    <ul>
      <li>
        <dfn>Total Audience</dfn> - LinkedIn Followers</li>
      <li>
        <dfn>Total Engagement</dfn> - "The number of times that users engaged with your posts, including when they reacted to, commented on, shared, or clicked on your post."</li>
      <li>
        <dfn>Total Impressions</dfn> - "The number of times your posts were displayed to users. This does not include impressions when your posts are shared by other users."</li>
      <li>
        <dfn>Total Audience Gained</dfn> - Gross number of Followers acquired</li>
    </ul>
  </div>
</div>

<script type="text/javascript">
  function openCity(evt, cityName) {
    // Declare all variables
    var i,
      tabcontent,
      tablinks;

    // Get all elements with class="tabcontent" and hide them
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
      tabcontent[i].style.display = "none";
    }

    // Get all elements with class="tablinks" and remove the class "active"
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
      tablinks[i].className = tablinks[i]
        .className
        .replace(" active", "");
    }

    // Show the current tab, and add an "active" class to the button that opened the tab
    document
      .getElementById(cityName)
      .style
      .display = "block";
    evt.currentTarget.className += " active";
    document
      .getElementById("headlinetitle")
      .innerHTML = "Headlines - " + evt.currentTarget.innerHTML
  }

  function myFunction(id) {
    var x = document.getElementById(id);
    if (x.style.display === "none") {
      x.style.display = "block";
    } else {
      x.style.display = "none";
    }
  }

  // Get the element with id="defaultOpen" and click on it
  document
    .getElementById("defaultOpen")
    .click();
</script>

{% from 'macros.njk' import dateFormatter %}
{%- macro popupPreApplication(params) -%}
  {{ params.label }}</br>
{{ params.value }} signups
{%- endmacro -%}
{%- macro popupApplied(params) -%}
{{ params.label }}</br>
{{ params.value }} applications received
{%- endmacro -%}

<h2>Performance Over Time </h2>
{% comp 'grid.autogrid', {min_width: '32rem'} %}

<div>
{% comp 'layout.figure', {title: 'Total Audience'} %}

{{ comp.oi.charts.graph.line({ config: {
  categories: all_weekly.columns.week_ending,
  width: 25,
  height: 12,
  text: { colour: '#eee' },
  xAxis: {
    title: 'Week ending (Sunday)',
    titleOffset: 4,
    labelRotate: 35,
    majorTick: 4,
    formatter: dateFormatter
  },
  yAxis: {
    title: 'Total Audience',
    titleOffset: 3,
    majorTick: 5000
  },
  plotArea: {
    yMin: 0,
    yMax: 40000,
    colour: 'var(--l23-dark-blue-grey)'
  },
  padding: {
    left: 5,
    bottom: 5
  },
  series: [
    {
      id: "all", label: "All",
      yValues: all_weekly.columns.audience_last,
      colour: all_colour,
      markerOptions: { s: 5 }
    },
    {
      id: "twitter", label: "Twitter",
      yValues: service.twitter_weekly.columns.audience_last,
      colour: twitter_colour,
      markerOptions: { s: 5 }
    },
     {
      id: "instagram", label: "Instagram",
      yValues: service.instagram_weekly.columns.audience_last,
      colour: instagram_colour,
      markerOptions: { s: 5 }
    },
    {
      id: "facebook", label: "Facebook",
      yValues: service.facebook_weekly.columns.audience_last,
      colour: facebook_colour,
      markerOptions: { s: 5 }
    },
    {
      id: "linkedin", label: "Linkedin",
      yValues: service.linkedin_weekly.columns.audience_last,
      colour: linkedin_colour,
      markerOptions: { s: 5 }
    }
  ],
  legend: {
    width: "20em"
  }
} }) | safe }}
{% endcomp %}
</div>
<div>

{% comp 'layout.figure', {title: 'Audience Gained'} %}

{{ comp.oi.charts.graph.line({ config: {
  categories: all_weekly.columns.week_ending,
  width: 25,
  height: 12,
  text: { colour: '#eee' },
  xAxis: {
    title: 'Week ending (Sunday)',
    titleOffset: 4,
    labelRotate: 35,
    majorTick: 4,
    formatter: dateFormatter
  },
  yAxis: {
    title: 'Audience Gained',
    titleOffset: 3,
    majorTick: 500
  },
  plotArea: {
    yMin: 0,
    yMax: 2500,
    colour: 'var(--l23-dark-blue-grey)'
  },
  padding: {
    left: 5,
    bottom: 5
  },
  series: [
    {
      id: "all", label: "All",
      yValues: all_weekly.columns.audience_gained_total,
      colour: all_colour,
      markerOptions: { s: 5 }
    },
    {
      id: "twitter", label: "Twitter",
      yValues: service.twitter_weekly.columns.audience_gained_total,
      colour: twitter_colour,
      markerOptions: { s: 5 }
    },
     {
      id: "instagram", label: "Instagram",
      yValues: service.instagram_weekly.columns.audience_gained_total,
      colour: instagram_colour,
      markerOptions: { s: 5 }
    },
    {
      id: "facebook", label: "Facebook",
      yValues: service.facebook_weekly.columns.audience_gained_total,
      colour: facebook_colour,
      markerOptions: { s: 5 }
    },
    {
      id: "linkedin", label: "Linkedin",
      yValues: service.linkedin_weekly.columns.audience_gained_total,
      colour: linkedin_colour,
      markerOptions: { s: 5 }
    }
  ],
  legend: {
    width: "20em"
  }
} }) | safe }}
{% endcomp %}
</div>
<div>

{% comp 'layout.figure', {title: 'Engagements'} %}

{{ comp.oi.charts.graph.line({ config: {
  categories: all_weekly.columns.week_ending,
  width: 25,
  height: 12,
  text: { colour: '#eee' },
  xAxis: {
    title: 'Week ending (Sunday)',
    titleOffset: 4,
    labelRotate: 35,
    majorTick: 4,
    formatter: dateFormatter
  },
  yAxis: {
    title: 'Engagements',
    titleOffset: 3,
    majorTick: 5000
  },
  plotArea: {
    yMin: 0,
    yMax: 30000,
    colour: 'var(--l23-dark-blue-grey)'
  },
  padding: {
    left: 5,
    bottom: 5
  },
  series: [
    {
      id: "all", label: "All",
      yValues: all_weekly.columns.engagements_total,
      colour: all_colour,
      markerOptions: { s: 5 }
    },
    {
      id: "twitter", label: "Twitter",
      yValues: service.twitter_weekly.columns.engagements_total,
      colour: twitter_colour,
      markerOptions: { s: 5 }
    },
     {
      id: "instagram", label: "Instagram",
      yValues: service.instagram_weekly.columns.engagements_total,
      colour: instagram_colour,
      markerOptions: { s: 5 }
    },
    {
      id: "facebook", label: "Facebook",
      yValues: service.facebook_weekly.columns.engagements_total,
      colour: facebook_colour,
      markerOptions: { s: 5 }
    },
    {
      id: "linkedin", label: "Linkedin",
      yValues: service.linkedin_weekly.columns.engagements_total,
      colour: linkedin_colour,
      markerOptions: { s: 5 }
    }
  ],
  legend: {
    width: "20em"
  }
} }) | safe }}
{% endcomp %}
</div>
<div>
{% comp 'layout.figure', {title: 'Impressions'} %}

{{ comp.oi.charts.graph.line({ config: {
  categories: all_weekly.columns.week_ending,
  width: 25,
  height: 12,
  text: { colour: '#eee' },
  xAxis: {
    title: 'Week ending (Sunday)',
    titleOffset: 4,
    labelRotate: 35,
    majorTick: 4,
    formatter: dateFormatter
  },
  yAxis: {
    title: 'Impressions',
    titleOffset: 4,
    majorTick: 100000
  },
  plotArea: {
    yMin: 0,
    yMax: 1000000,
    colour: 'var(--l23-dark-blue-grey)'
  },
  padding: {
    left: 5,
    bottom: 5
  },
  series: [
    {
      id: "all", label: "All",
      yValues: all_weekly.columns.impressions_total,
      colour: all_colour,
      markerOptions: { s: 5 }
    },
    {
      id: "twitter", label: "Twitter",
      yValues: service.twitter_weekly.columns.impressions_total,
      colour: twitter_colour,
      markerOptions: { s: 5 }
    },
     {
      id: "instagram", label: "Instagram",
      yValues: service.instagram_weekly.columns.impressions_total,
      colour: instagram_colour,
      markerOptions: { s: 5 }
    },
    {
      id: "facebook", label: "Facebook",
      yValues: service.facebook_weekly.columns.impressions_total,
      colour: facebook_colour,
      markerOptions: { s: 5 }
    },
    {
      id: "linkedin", label: "Linkedin",
      yValues: service.linkedin_weekly.columns.impressions_total,
      colour: linkedin_colour,
      markerOptions: { s: 5 }
    }
  ],
  legend: {
    width: "20em"
  }
} }) | safe }}
{% endcomp %}
</div>
{% endcomp %}