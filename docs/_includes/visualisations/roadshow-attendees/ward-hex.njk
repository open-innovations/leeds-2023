{{ comp.oi.hexmap({ id: 'ward-hexmap' }) | safe }}

<script>
  window.addEventListener('DOMContentLoaded', () => {
    const hexjson = JSON.parse('{{ hex.wards_leeds | dump | safe }}');
    const wardData = JSON.parse('{{ metrics.roadshow_attendees.by_ward.rows | dump | safe }}');

    const maxAttendees = Math.max(...wardData.map(x => x.attendees));
    const colourScale = (v = 0) => {
      const proportion = v / maxAttendees;
      return `hsl(173, 100%, ${100 - proportion * 50}%)`
    }

    let outOfRegion = 0;
    const otherWards = [];
    wardData.forEach(({ward_code: wardCode, attendees}) => {
      if (Object.keys(hexjson.hexes).includes(wardCode)) {
        hexjson
          .hexes[wardCode]
          .attendees = parseInt(attendees);
        hexjson
          .hexes[wardCode]
          .colour = colourScale(parseInt(attendees));
      } else {
        outOfRegion += parseInt(attendees);
        otherWards.push(wardCode)
      }
    });

    // Attach our hexmap to <div id="ward-hexmap"></div>
    const hex = new ODI.hexmap(document.getElementById('ward-hexmap'), {
      label: {
        show: true
      },
      format: function (txt, attr) {
        tspans = '<tspan class="off">' + txt.substr(0, 3) + '</tspan>';
        lines = txt.split(/ /);
        lines.push(attr.hex.pop.toLocaleString());
        for (var i = 0; i < lines.length; i++) {
          tspans += '<tspan class="on' + (
            i == lines.length - 1
            ? ' big'
            : '') + '" y="' + (
          attr.y + (i - lines.length / 2 + 0.5) * attr['font-size']) + '" x="' + attr.x + '">' + lines[i] + '</tspan>';
        }
        return tspans;
      },
      hexjson
    });
    let tip;
    let fader;
    hex.on('mouseover', function (e) {
      const {n: name, attendees} = e.data.data;
      const svg = e.data.hexmap.el;
      const hex = e.target;
      tip = svg.querySelector('.tooltip');
      if (!tip) {
        // Add a new tooltip
        tip = document.createElement('div');
        tip
          .classList
          .add('tooltip');
        svg.appendChild(tip);
      }
      clearTimeout(fader);
      tip.style.opacity = '100%';
      tip.style.display = 'initial';
      // Update contents of tooltip
      tip.innerHTML = `${name}<br />${attendees} attendee returns`;
      // Update position of tooltip
      const bb = hex.getBoundingClientRect();
      const bbo = svg.getBoundingClientRect();
      tip.style.left = Math.round(bb.left + bb.width / 2 - bbo.left + svg.scrollLeft) + 'px';
      tip.style.top = Math.round(bb.top + bb.height / 2 - bbo.top) + 'px';
    });
    hex.on('mouseout', function (e) {
      tip.style.opacity = '0';
      fader = window.setTimeout(() => tip.style.display = 'none', 500);
    });
  });
</script>